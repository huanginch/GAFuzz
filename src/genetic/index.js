import { appendFileSync } from 'fs';
import Select from '../Selection/index.js'

class Genetic {
    constructor(options) {
        this.stats = {};
        this.population = [];
        this.options = { ...this.getDefaultOptions(), ...options };
    }

    getDefaultOptions() {
        return {
            populationSize: 250,
            mutateProbability: 0.2,
            crossoverProbability: 0.9,
            fittestNSurvives: 1,
            select1: Select.Fittest,
            select2: Select.Tournament2,
            optimize: (phenotypeA, phenotypeB) =>
                phenotypeA.fitness >= phenotypeB.fitness,
        };
    }

    /**
     * Try cross a pair or one selected phenotypes
     */
    tryCrossover = async () => {
        const { crossoverProbablity, crossoverFunction } = this.options;
        let selected = crossoverFunction && Math.random() <= crossoverProbablity ? this.selectPair() : this.selectOne();
        if (selected.length > 1) {
            selected = await crossoverFunction(selected[0], selected[1]);
        }
        for (let i = 0; i < selected.length; i++) {
            selected[i] = await this.tryMutate(selected[i]);
        }
        return selected;
    };

    /**
     * Try mutate entity with optional probabilty
     */
    tryMutate = async (entity) => {
        // applies mutation based on mutation probability
        if (this.options.mutationFunction && Math.random() <= this.options.mutateProbablity) {
            return this.options.mutationFunction(entity);
        }
        return entity;
    };

    /**
     * Startup population, if not passed than will be random generated by randomFunction()
     */
    async seed(entities = []) {
        this.population = entities.map((entity) => ({ fitness: null, entity, state: {} }));
        // seed the population
        await this.fill(this.population);
    }
    best(count = 1) {
        return this.population.slice(0, count);
    }
    /**
     * Breed population with optional breed settings
     */
    async breed() {
        // crossover and mutate
        let newPop = [];
        // lets the best solution fall through
        if (this.options.fittestNSurvives) {
            const cutted = this.cutPopulation(this.options.fittestNSurvives);

            for (const item of cutted) {
                const tempItem = JSON.parse(JSON.stringify(item));
                newPop.push({ ...tempItem });
                // newPop.push({ ...item });
            }
        }
        // Lenght may be change dynamically, because fittest and some pairs from crossover
        while (newPop.length < this.options.populationSize) {
            const crossed = await this.tryCrossover();
            newPop.push(...crossed.map((entity) => ({ fitness: null, entity, state: {} })));
        }
        if (this.options.deduplicate) {
            newPop = newPop.filter((ph) => this.options.deduplicate(ph.entity));
        }
        await this.fill(newPop);
        // console.log('newPop', newPop);
        this.population = newPop;
    }
    /**
     * Estimate population before breeding
     */
    async estimate() {
        const { fitnessFunction } = this.options;
        // reset for each generation
        this.internalGenState = {};
        let i = 0;
        for await (const target of this.population) {
            if (i > this.options.fittestNSurvives - 1 || this.population.length > 2000) {
                const { fitness, state } = await fitnessFunction(target.entity);
                target.fitness = fitness;
                target.state = state;
            }

            i++;
        }
    }
    /**
     * witre non duplicate population to csv
    */
    writeToCSV(csvFile, population, i) {
        appendFileSync(csvFile, `round${i}\n`);

        if (i !== 0) {
            population = population.slice(this.options.fittestNSurvives - 1, population.length);
        }

        for (const item of population) {
            appendFileSync(csvFile, `${item.fitness}, ${item.entity}\n`);
        }
    }
    /**
     * Appli population sorting
     */
    reorderPopulation() {
        this.population = this.population.sort((a, b) => (this.options.optimize(a, b) ? -1 : 1));
    }
    /** Fill population if is not full */
    async fill(arr) {
        while (arr.length < this.options.populationSize) {
            const entity = await this.options.randomFunction();
            arr.push({ entity, fitness: null, state: {} });
        }
    }
    /**
     * Mean deviation
     */
    getMean() {
        return this.population.reduce((a, b) => a + b.fitness, 0) / this.population.length;
    }
    /**
     * Standart deviation
     */
    getStdev(mean) {
        const { population: pop } = this;
        const l = pop.length;
        return Math.sqrt(pop.map(({ fitness }) => (fitness - mean) * (fitness - mean)).reduce((a, b) => a + b, 0) / l);
    }
    /**
     * Select one phenotype from population
     */
    selectOne() {
        const { select1 } = this.options;
        return [select1.call(this, this.population)];
    }
    /**
     * Select two phenotypes from population for crossover
     */
    selectPair() {
        const { select2 } = this.options;
        return [select2.call(this, this.population), select2.call(this, this.population)];
    }
    /**
     * Return population without an estimate (fitness)
     */
    cutPopulation(count) {
        return this.population.slice(0, count).map((ph) => ({ fitness: ph.fitness, entity: ph.entity, state: ph.state }));
    }
}
export default Genetic;
